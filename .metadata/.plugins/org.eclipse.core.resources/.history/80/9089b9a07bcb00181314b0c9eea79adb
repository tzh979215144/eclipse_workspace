package com.tanpang.day01;

import java.util.Stack;

/**
 * 第一页
 * 设计一个有getMin功能的栈
 * @author tanpang
 *
 */
public class Stack01 {

	/**
	 * 两个stack，一个用来存储数据，一个用来存储当前最小值
	 */
		private Stack<Integer> stackData;
		private Stack<Integer> stackMin ;
		
		public Stack01() {
			this.stackData=new Stack<Integer>();
			this.stackMin=new Stack<Integer>();
		}
/**
 * push的规则		
 * @param newNum
 */
		public void push(Integer newNum) {
			if(this.stackMin.isEmpty()) {
					stackMin.push(newNum);
			}else if(newNum<=this.getMin()) {
				stackMin.push(newNum);
			}
			this.stackData.push(newNum);
		}
/**
 * pop的规则和push的规则相对应
 * @return
 */
		public Integer pop() {
			if(this.stackData.isEmpty()){
				throw new RuntimeException("your stack is empty");
			}
			int value = this.stackData.pop();
			if(value==this.getMin()) {
				this.stackMin.pop();
			}
			return value;
		}
		private Integer getMin() {
			if(this.stackMin.isEmpty()) {
				throw new RuntimeException("your stack is empty");
			}
			return stackMin.peek();
		}
		
		
}
